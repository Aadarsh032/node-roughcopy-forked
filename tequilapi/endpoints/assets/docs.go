// Code generated by vfsgen; DO NOT EDIT.

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// DocsAssets statically implements the virtual filesystem provided to vfsgen.
var DocsAssets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2022, 4, 11, 7, 43, 42, 52409317, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2022, 3, 3, 10, 31, 9, 296552235, time.UTC),
			uncompressedSize: 642,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x92\xc1\x8e\xd4\x30\x0c\x86\xef\xf3\x14\xde\x5c\xb8\x4c\x9b\x22\x90\x40\x43\x5b\x40\x2c\x07\x0e\x88\xd5\x6a\x2f\x1c\x33\x89\xdb\x66\x48\x9d\x10\xbb\x33\x8c\x80\x77\x47\x6d\x87\xd9\x5d\x5f\x62\x7f\xb6\x7f\x39\x4e\xea\x9b\xdb\x6f\x9f\x1e\xbe\xdf\x7d\x86\x41\xc6\xd0\x6e\xea\xff\x07\x1a\xd7\x6e\x00\x00\x6a\xf1\x12\xb0\x7d\xc0\x9f\x93\x0f\x06\x3e\xde\x7d\xa9\xf5\x8a\xd6\xf4\x4d\x51\x00\x21\x3a\x74\xd0\xc5\x0c\xc6\x99\x24\xfe\x88\xe0\x90\x7d\x4f\x50\x14\x97\xba\x11\xc5\x80\x1d\x4c\x66\x94\x46\x4d\xd2\x15\x6f\x95\x7e\x9a\x23\x33\x62\xa3\x8e\x1e\x4f\x29\x66\x51\x60\x23\x09\x92\x34\xea\xe4\x9d\x0c\x8d\xc3\xa3\xb7\x58\x2c\xc1\x16\x3c\x79\xf1\x26\x14\x6c\x4d\xc0\xe6\xa5\xba\x08\x05\x4f\x3f\x60\xc8\xd8\x35\x6a\x10\x49\xbc\xd3\xba\x8b\x24\x5c\xf6\x31\xf6\x01\x4d\xf2\x5c\xda\x38\x6a\xcb\xfc\xbe\x33\xa3\x0f\xe7\xe6\xeb\x9c\xc7\x9c\x8d\xec\x5e\x55\xd5\xf6\x75\x55\x6d\xdf\x54\xd5\x9f\xfb\xb8\x8f\x12\x9f\x22\x05\x19\x43\xa3\x58\xce\x01\x79\x40\x14\xd5\x6e\xae\x2b\x58\x9c\x7b\xbc\x8d\x16\x5c\x44\xa6\x17\x32\xdf\x95\x7a\x84\x38\x09\x66\x48\xa6\x47\x58\x5b\x97\xd2\xeb\x5a\x16\xb6\xfa\xb3\xed\xa3\x3b\xc3\xef\x6b\x38\xdb\x68\x72\xef\x69\x07\xd5\xbb\x67\x38\x19\xe7\x3c\xf5\xcf\xf8\xdf\x55\x53\x5f\x44\x6b\xbd\x3e\x63\x3d\xab\xb6\x9b\x3a\xa3\x8b\x16\x38\xa1\x2d\xa6\x1c\x1a\x55\x6a\x3e\x99\xbe\xc7\x5c\x1e\x38\x92\x6a\x6b\xbd\x54\xb4\x9b\x9a\x6d\xf6\x49\x80\xb3\x7d\x5c\xa4\x75\x54\x1e\xd8\x61\xf0\xc7\x5c\x12\x8a\xa6\x34\xae\x0d\x1f\x08\x7f\x89\xde\x4f\xe4\x02\xf2\x8a\x4a\x16\x43\xce\x84\x48\x58\x1e\x58\xb5\xf3\x50\x8b\xe6\x3c\xd5\x65\x1c\xbd\xfc\xb5\x7f\x01\x00\x00\xff\xff\xf9\x93\x7d\x58\x82\x02\x00\x00"),
		},
		"/swagger.json": &vfsgen۰FileInfo{
			name:    "swagger.json",
			modTime: time.Date(2022, 4, 12, 9, 14, 44, 566728907, time.UTC),
			content: []byte("\x7b\x0a\x20\x20\x22\x73\x77\x61\x67\x67\x65\x72\x22\x3a\x20\x22\x32\x2e\x30\x22\x2c\x0a\x20\x20\x22\x70\x61\x74\x68\x73\x22\x3a\x20\x7b\x7d\x0a\x7d"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/swagger.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰FileInfo:
		return &vfsgen۰File{
			vfsgen۰FileInfo: f,
			Reader:          bytes.NewReader(f.content),
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰FileInfo is a static definition of an uncompressed file (because it's not worth gzip compressing).
type vfsgen۰FileInfo struct {
	name    string
	modTime time.Time
	content []byte
}

func (f *vfsgen۰FileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰FileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰FileInfo) NotWorthGzipCompressing() {}

func (f *vfsgen۰FileInfo) Name() string       { return f.name }
func (f *vfsgen۰FileInfo) Size() int64        { return int64(len(f.content)) }
func (f *vfsgen۰FileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰FileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰FileInfo) IsDir() bool        { return false }
func (f *vfsgen۰FileInfo) Sys() interface{}   { return nil }

// vfsgen۰File is an opened file instance.
type vfsgen۰File struct {
	*vfsgen۰FileInfo
	*bytes.Reader
}

func (f *vfsgen۰File) Close() error {
	return nil
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
